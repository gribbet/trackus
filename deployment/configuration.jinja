resources:

- type: compute.v1.instanceTemplate
  name: {{ env["deployment"] }}-api-instance-template
  properties:
    properties:
      machineType: f1-micro
      metadata:
        items:
        - key: user-data
          value: |
            #cloud-config

            users:
            - name: api
              uid: 2000

            write_files:
            - path: /etc/systemd/system/api.service
              permissions: 0644
              owner: root
              content: |
                [Unit]
                Description=API
                Wants=gcr-online.target
                After=gcr-online.target

                [Service]
                Environment="HOME=/home/api"
                ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
                ExecStart=/usr/bin/docker run --rm -u 2000 -p 80:8080 --name=api gcr.io/{{ env["project"] }}/api
                ExecStop=/usr/bin/docker stop api
                ExecStopPost=/usr/bin/docker rm api

            runcmd:
            - systemctl daemon-reload
            - systemctl start api.service
      disks:
      - deviceName: boot
        type: PERSISTENT
        boot: true
        autoDelete: true
        initializeParams:
          sourceImage: projects/cos-cloud/global/images/family/cos-stable
      serviceAccounts:
      - email: {{ env["project_number"] }}-compute@developer.gserviceaccount.com
        scopes:
        - https://www.googleapis.com/auth/devstorage.read_only
      networkInterfaces:
      - network: $(ref.{{ env["deployment"] }}-network.selfLink)
        accessConfigs:
          - type: ONE_TO_ONE_NAT

{% for region in properties["regions"] %}

- type: compute.v1.regionInstanceGroupManager
  name: {{ env["deployment"] }}-api-region-instance-group-{{ region }}
  properties:
    region: {{ region }}
    targetSize: 1
    baseInstanceName: {{ env["deployment"] }}-api-instance
    instanceTemplate: $(ref.{{ env["deployment"] }}-api-instance-template.selfLink)

- type: compute.v1.regionAutoscaler
  name: {{ env["deployment"] }}-api-autoscaler-{{ region }}
  properties:
    region: {{ region }}
    target: $(ref.{{ env["deployment"] }}-api-region-instance-group-{{ region }}.selfLink)
    autoscalingPolicy:
      minNumReplicas: 1
      maxNumReplicas: 2

{% endfor %}

- type: compute.v1.httpHealthCheck
  name: {{ env["deployment"] }}-api-health-check
  properties:
    port: 80
    requestPath: /health

- type: compute.v1.network
  name: {{ env["deployment"] }}-network
  properties:
    autoCreateSubnetworks: true

- type: compute.v1.firewall
  name: {{ env["deployment"] }}-firewall
  properties:
    network: $(ref.{{ env["deployment"] }}-network.selfLink)
    sourceRanges: ["0.0.0.0/0"]
    allowed:
    - IPProtocol: TCP
      ports: ["80"]

- type: compute.v1.backendService
  name: {{ env["deployment"] }}-api-backend-service
  properties:
    port: 80
    timeoutSec: 1
    backends: 
      {% for region in properties["regions"] %}
      - group: $(ref.{{ env["deployment"] }}-api-region-instance-group-{{ region }}.instanceGroup)
      {% endfor %}
    healthChecks:
      - $(ref.{{ env["deployment"] }}-api-health-check.selfLink)

- type: compute.v1.urlMap
  name: {{ env["deployment"] }}-api-url-map
  properties:
    defaultService: $(ref.{{ env["deployment"] }}-api-backend-service.selfLink)

- type: compute.v1.targetHttpProxy
  name: {{ env["deployment"] }}-api-target-http-proxy
  properties:
    urlMap: $(ref.{{ env["deployment"] }}-api-url-map.selfLink)

- type: compute.v1.globalForwardingRule
  name: {{ env["deployment"] }}-api-global-forwarding-rule
  properties:
    portRange: 80
    target: $(ref.{{ env["deployment"] }}-api-target-http-proxy.selfLink)